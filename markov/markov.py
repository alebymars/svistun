import telebot
import logging
import functools
from markov import speech
from markov.settings import settings
from markov.filters import message_filter

logging.basicConfig(level=getattr(logging, settings.LOG_LEVEL))
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(settings.TELEGRAM_TOKEN)


def admin_required(func):
    @functools.wraps(func)
    def wrapper_admin_required(message, *args, **kwargs):
        username = message.from_user.username
        chat_id = str(message.chat.id)
        username_admins = []
        if message.chat.type != 'private':
            username_admins = [
                u.user.username for u in bot.get_chat_administrators(chat_id)
            ]
        if username in username_admins + settings.ADMIN_USERNAMES:
            return func(message, *args, **kwargs)
        else:
            bot.reply_to(message, '–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ü§î')
    return wrapper_admin_required


def confirmation_required(func):
    @functools.wraps(func)
    def wrapper_confirmation_required(message, *args, **kwargs):
        if message.text.startswith('/'):
            markup = telebot.types.ReplyKeyboardMarkup(
                row_width=2, one_time_keyboard=True, selective=True
            )
            markup.add('–î–∞', '–ù–µ—Ç')
            reply = bot.reply_to(
                message, '—É–≤–µ—Ä–µ–Ω—ã –ª–∏ –≤—ã?',
                reply_markup=markup
            )
            logger.info(f'–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ {func.__name__}')
            callback = globals()[func.__name__]
            bot.register_next_step_handler(reply, callback)
            return

        elif message.text == '–î–∞':
            logger.info(f'–ø–æ–ª—É—á–µ–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è {func.__name__}')
            func(message, *args, **kwargs)

        logger.info('—É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã')
        markup = telebot.types.ReplyKeyboardRemove()
        bot.reply_to(message, '–û—Ç–ª–∏—á–Ω–æ', reply_markup=markup)

    return wrapper_confirmation_required


@bot.message_handler(commands=[settings.SENTENCE_COMMAND])
def generate_sentence(message, reply=False):
    logger.info(f'–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ CMD –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Ç–µ {message.chat.id}')
    generated_message = speech.new_message(message.chat)
    if reply:
        bot.reply_to(message, generated_message)
    else:
        bot.send_message(message.chat.id, generated_message)


@bot.message_handler(commands=[settings.REMOVE_COMMAND])
@admin_required
@confirmation_required
def remove_messages(message):
    logger.info(f'—É–¥–∞–ª–∏—Ç—å cmd –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Ç–µ {message.chat.id}')
    speech.delete_model(message.chat)


@bot.message_handler(commands=[settings.VERSION_COMMAND])
def get_repo_version(message):
    logger.info(f'–≤–µ—Ä—Å–∏—è cmd –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —á–∞—Ç–∞ {message.chat.id}')
    hash_len = 7
    commit_hash = settings.COMMIT_HASH[:hash_len]
    bot.reply_to(message, commit_hash)


@bot.message_handler(commands=[settings.FLUSH_COMMAND])
@admin_required
@confirmation_required
def flush_cache(message):
    logger.info(f'flush cmd –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Ç–µ {message.chat.id}')
    speech.flush()


@bot.message_handler(commands=[settings.HELP_COMMAND])
def help(message):
    logger.info(f'–ø–æ–º–æ—â—å cmd –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Ç–µ {message.chat.id}')
    username = bot.get_me().username
    sentence_command = settings.SENTENCE_COMMAND
    remove_command = settings.REMOVE_COMMAND
    version_command = settings.VERSION_COMMAND
    flush_command = settings.FLUSH_COMMAND
    start_command = settings.START_COMMAND
    help_command = settings.HELP_COMMAND

    help_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DeniskaBot, –±–æ—Ç Telegram, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç "
        "—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–Ω –Ω–∞ Markov chains!\n\n"
        "/{sentence_command}: {username} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "/{remove_command}: {username} —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞.\n"
        "/{version_command}: {username} —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è.\n"
        "/{flush_command}: {username} –ø–æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à.\n"
        "/{help_command}: {username} –ø–æ–º–æ—â—å!"
    )
    output_text = help_text.format(
        username=username, sentence_command=sentence_command,
        remove_command=remove_command, version_command=version_command,
        flush_command=flush_command, start_command=start_command,
        help_command=help_command
    )
    bot.reply_to(message, output_text)


@bot.message_handler(commands=[settings.START_COMMAND])
def start(message):
    bot.reply_to(message, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DeniskaBot, –±–æ—Ç Telegram, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç "
                          f"–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —à—Ç—É–∫–∏, –∑–∞–ø—É—Å—Ç–∏—Ç—å /{settings.SENTENCE_COMMAND} "
                          f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "
                          f"/{settings.HELP_COMMAND}.")


@bot.message_handler(func=message_filter)
def handle_message(message):
    try:
        speech.update_model(message.chat, message.text)
    except ValueError as er:
        logger.error(er)
        return
    if f'@{bot.get_me().username}' in message.text:
        generate_sentence(message, reply=True)


def notify_admin(message):
    if settings.ADMIN_CHAT_ID and message:
        bot.send_message(settings.ADMIN_CHAT_ID, message)
    logger.info(message)


if __name__ == '__main__':
    notify_admin('–±–æ—Ç —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª')
    bot.polling(none_stop=True)
